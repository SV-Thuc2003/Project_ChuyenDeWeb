package com.example.be.service;

import com.example.be.dto.request.*;
import com.example.be.dto.response.LoginResponse;
import com.example.be.dto.response.UserProfileResponse;
import com.example.be.entity.User;
import com.example.be.entity.UserRoles;
import com.example.be.enums.RoleName;
import com.example.be.enums.Status;
import com.example.be.enums.exception.ErrorCode;
import com.example.be.exception.AppException;
import com.example.be.repository.UserRepository;
import com.example.be.repository.UserRoleRepository;
import com.example.be.security.oauth2.CustomOAuth2UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.Collections;

@Service
@Transactional
@RequiredArgsConstructor
public class AuthService {
    private final UserRepository userRepository;
    private final UserRoleRepository userRoleRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtService jwtService;
    private final EmailService emailService;
    private final CustomOAuth2UserService oauthService;

    /**
     * ƒêƒÉng k√≠ t√†i kho·∫£n v√† g·ª≠i OTP x√°c minh qua email
     * @param request th√¥ng tin ƒëƒÉng k√Ω
     * @return th√¥ng b√°o y√™u c·∫ßu x√°c th·ª±c
     */

    @Transactional
    public String register(RegisterRequest request){
        if (userRepository.existsByUsername(request.getUsername()))
//            throw new RuntimeException("Username ƒë√£ t·ªìn t·∫°i");
            throw new AppException(ErrorCode.USERNAME_ALREADY_EXISTS);
        if(userRepository.existsByEmail(request.getEmail()))
            throw new AppException(ErrorCode.EMAIL_ALREADY_EXISTS);

        // t·∫°o m√£ otp ng·∫´u nhi√™n
        String otp =generateOTP();

        // t·∫°o v√† thi·∫øt l·∫≠p ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi d√πng m·ªõi
        User user = new User();
        user.setUsername(request.getUsername());
        user.setPassword(passwordEncoder.encode(request.getPassword()));
        user.setName(request.getName());
        user.setEmail(request.getEmail());
        user.setPhone(request.getPhone());
//        user.setAddress(request.getAddress());
        user.setStatus(Status.INACTIVE); // ch∆∞a ho·∫°t ƒë·ªông cho ƒë·∫øn khi x√°c minh OTP
        user.setOtpCode(otp);
        user.setOtpExpiry(LocalDateTime.now().plusMinutes(5));

        UserRoles defaultRole = userRoleRepository.findByRoleName(RoleName.USER)
                .orElseThrow(() -> new AppException(ErrorCode.ROLE_NOT_FOUND));
        user.setRoles(Collections.singleton(defaultRole));
        userRepository.save(user);

        emailService.sendOtpEmail(request.getEmail(), otp);
        return "ƒêƒÉng k√Ω th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c OTP";
    }

    /**
     * X√°c minh m√£ OTP ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email ng∆∞·ªùi d√πng
     * @param request bao g·ªìm email v√† m√£ OTP
     * @return k·∫øt qu·∫£ x√°c minh
     */
    public String verifyOtp(OtpVerificationRequest request) {

        User user = userRepository.findByEmail(request.getEmail())
                .orElseThrow(()-> new AppException(ErrorCode.EMAIL_NOT_FOUND));

        if (user.getIsVerified()) throw new AppException(ErrorCode.ACCOUNT_ALREADY_VERIFIED);
        if (user.getOtpCode() == null || user.getOtpExpiry() == null || LocalDateTime.now().isAfter(user.getOtpExpiry())){
            throw new AppException(ErrorCode.OTP_EXPIRED);
        }

        if (!user.getOtpCode().equals(request.getOtpCode())){
            throw new AppException(ErrorCode.INVALID_OTP);
        }

        user.setIsVerified(true);
        user.setStatus(Status.ACTIVE);
        user.setOtpCode(null);
        user.setOtpExpiry(null);
        userRepository.save(user);
        return "X√°c th·ª±c th√†nh c√¥ng";
    }

    /**
     * G·ª≠i l·∫°i m√£ OTP m·ªõi n·∫øu ng∆∞·ªùi d√πng ch∆∞a x√°c th·ª±c
     * @param email ƒë·ªãa ch·ªâ email c·∫ßn g·ª≠i l·∫°i
     * @return th√¥ng b√°o g·ª≠i OTP
     */
    public String resendOtp(String email){
        User user = userRepository.findByEmail(email).orElseThrow(()-> new AppException(ErrorCode.EMAIL_NOT_FOUND));

        if (user.getIsVerified()) return "T√†i kho·∫£n ƒë√£ x√°c th·ª±c.";

        String newOtp =generateOTP();
        user.setOtpCode(newOtp);
        user.setOtpExpiry(LocalDateTime.now().plusMinutes(5));
        userRepository.save(user);

        emailService.sendOtpEmail(email, newOtp);
        return "OTP m·ªõi ƒë∆∞·ª£c g·ª≠i.";
    }

    /**
     * T·∫°o m√£ OTP g·ªìm 6 ch·ªØ s·ªë ng·∫´u nhi√™n
     * @return chu·ªói 6 s·ªë
     */
    private String generateOTP() {
        int otp = (int) (Math.random() * 900000) + 100000;
        return String.valueOf(otp);
    }

    /**
     * ƒêƒÉng nh·∫≠p t√†i kho·∫£n b·∫±ng username v√† passwword.
     * Ki·ªÉm tra OTP v√† tr·∫°ng th√°i t√†i kho·∫£n.
     * Tr·∫£ v·ªÅ JWT token n·∫øu th√†nh c√¥ng.
     *
     * @param request th√¥ng tin ƒëƒÉng nh·∫≠p
     * @return LoginResponse bao g·ªìm token, username, role
     */
    public LoginResponse login(LoginRequest request) {
        User user = userRepository.findByUsername(request.getUsername())
                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_FOUND));
        if (!passwordEncoder.matches(request.getPassword(), user.getPassword())) {
            throw new AppException(ErrorCode.INVALID_PASSWORD);
        }

        if (!user.getIsVerified()) {
            throw new AppException(ErrorCode.USER_NOT_VERIFIED);
        }

        if(user.getStatus() == Status.BANNED) {
            throw new AppException(ErrorCode.USER_BANNED);
        }

        // L·∫•y role (gi·∫£ s·ª≠ ch·ªâ c√≥ 2 role
        String role = user.getRoles().stream().findFirst()
                .map(r -> r.getRoleName().name())
                .orElse("USER");
        // T·∫°o JWT token
        String token = jwtService.generateToken(user.getEmail(), user.getId());

        return new LoginResponse(token, user.getUsername(), role, user.getId()); // üëà th√™m user.getId()
    }

    public UserProfileResponse getProfile(Integer userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_FOUND));

        return new UserProfileResponse(
                user.getName(),
                user.getEmail(),
                user.getPhone(),
                user.getAddress()
        );
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n c·ªßa ng∆∞·ªùi d√πng
     *
     * @param userId ng∆∞·ªùi d√πng
     * @param request th√¥ng tin c·∫≠p nh·∫≠t
     * @return th√¥ng b√°o k·∫øt qu·∫£
     */
    public String updateProfile(Integer userId, UpdateProfileRequest request) {
        // T√¨m user trong database
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_FOUND));

        // C·∫≠p nh·∫≠t th√¥ng tin n·∫øu c√≥ s·ª± thay ƒë·ªïi (optional, c√≥ th·ªÉ b·ªè)
        if (request.getName() != null) {
            user.setName(request.getName().trim());
        }
        if (request.getPhone() != null) {
            user.setPhone(request.getPhone().trim());
        }
        if (request.getAddress() != null) {
            user.setAddress(request.getAddress().trim());
        }

        // C·∫≠p nh·∫≠t th·ªùi gian
        user.setUpdateAt(LocalDateTime.now());

        // L∆∞u l·∫°i
        userRepository.save(user);

        return "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng";
    }


    /**
     * ƒê·ªïi m·∫≠t kh·∫©u c·ªßa ng∆∞·ªùi d√πng sau khi x√°c minh m·∫≠t kh·∫©u c≈©.
     *
     * @param userId ng∆∞·ªùi d√πng
     * @param request bao g·ªìm m·∫≠t kh·∫©u c≈© v√† m·ªõi.
     * @return th√¥ng b√°o ƒë·ªïi m·∫≠t kh·∫©u
     */
    public String changePassword(Integer userId, ChangePasswordRequest request){
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_FOUND));

        if(!passwordEncoder.matches(request.getCurrentPassword(), user.getPassword())){
            throw new RuntimeException("M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c");
        }

        user.setPassword(passwordEncoder.encode(request.getNewPassword()));
        userRepository.save(user);
        return "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng";
    }

    /**
     * G·ª≠i m√£ OTP ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
     *
     * @param email ƒë·ªãa ch·ªâ email c·ªßa ng∆∞·ªùi d√πng
     * @return th√¥ng b√°o k√™t qu·∫£ g·ª≠i OTP
     */
    public String forgotPassword(String email) {
        User user = userRepository.findByEmail(email).orElseThrow(() ->
                new AppException(ErrorCode.EMAIL_NOT_FOUND));
        String otp = generateOTP();
        user.setOtpCode(otp);
        user.setOtpExpiry(LocalDateTime.now().plusMinutes(5));
        userRepository.save(user);
        emailService.sendOtpEmail(email,otp);
        return "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email";
    }

    public String verifyOtpForResetPassword(OtpVerificationRequest request) {
        User user = userRepository.findByEmail(request.getEmail())
                .orElseThrow(() -> new AppException(ErrorCode.EMAIL_NOT_FOUND));

        if (user.getOtpCode() == null || user.getOtpExpiry() == null || LocalDateTime.now().isAfter(user.getOtpExpiry())) {
            throw new AppException(ErrorCode.OTP_EXPIRED);
        }

        if (!user.getOtpCode().equals(request.getOtpCode())) {
            throw new AppException(ErrorCode.INVALID_OTP);
        }

        // Kh√¥ng check user.getIsVerified() ·ªü ƒë√¢y, v√¨ reset m·∫≠t kh·∫©u cho t√†i kho·∫£n ƒë√£ verified
        return "X√°c minh OTP th√†nh c√¥ng";
    }


    /**
     * X√°c minh m√£ OTp v√† ƒë·ªïi m·∫≠t kh·∫©u m·ªõi.
     *
     * @param request ch·ª©a email, m√£ OTP v√† m·∫≠t kh·∫©u m·ªõi
     * @return th√¥ng b√°o th√†nh c√¥ng ho·∫∑c l·ªói
     */
    public String resetPasswordWithOtp(ResetPasswordRequest request) {
        // L·∫•y user theo email
        User user = userRepository.findByEmail(request.getEmail())
                .orElseThrow(() -> new AppException(ErrorCode.EMAIL_NOT_FOUND));

        // X√°c minh OTP d√πng h√†m verifyOtpForResetPassword ƒë√£ c√≥ (t√°i s·ª≠ d·ª•ng)
        verifyOtpForResetPassword(new OtpVerificationRequest(request.getEmail(), request.getOtpCode()));

        // N·∫øu OTP h·ª£p l·ªá th√¨ ƒë·ªïi m·∫≠t kh·∫©u
        user.setPassword(passwordEncoder.encode(request.getNewPassword()));
        // X√≥a OTP sau khi d√πng
        user.setOtpCode(null);
        user.setOtpExpiry(null);
        userRepository.save(user);

        return "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng";
    }

}

